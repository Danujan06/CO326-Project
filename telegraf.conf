# Global agent settings
[agent]
  interval = "10s"
  round_interval = true
  metric_batch_size = 1000
  metric_buffer_limit = 10000
  flush_interval = "10s"
  flush_jitter = "2s"
  hostname = "water_quality_system"

# Input plugin: Sensors via MQTT
[[inputs.mqtt_consumer]]
  servers = ["tcp://mqtt-broker.local:1883"]
  topics = ["water_quality/sensors"]
  qos = 1
  data_format = "json"
  json_string_fields = ["sensor_id", "location"]
  tag_keys = ["location", "sensor_id"]
  json_time_key = "timestamp"
  json_time_format = "unix_ms"
  json_name_key = "parameter"
  json_query = '''
  {
    "pH": .pH,
    "Hardness": .Hardness,
    "Solids": .Solids,
    "Chloramines": .Chloramines,
    "Sulfate": .Sulfate,
    "Conductivity": .Conductivity,
    "OrganicCarbon": .OrganicCarbon,
    "Trihalomethanes": .Trihalomethanes,
    "Turbidity": .Turbidity,
    "Potability": .Potability
  }
  '''

# Input plugin: Kafka for predictions
[[inputs.kafka_consumer]]
  brokers = ["kafka-broker.local:9092"]
  topics = ["water_quality_predictions"]
  group_id = "telegraf_water_quality_group"
  offset = "oldest"
  data_format = "json"
  json_string_fields = ["prediction_type"]
  tag_keys = ["prediction_type"]
  json_time_key = "timestamp"

# Output plugin: InfluxDB
[[outputs.influxdb_v2]]
  urls = ["http://influxdb.local:8086"]
  token = "${INFLUX_TOKEN}"
  organization = "WaterQualityOrg"
  bucket = "water_quality_metrics"
  namepass = ["pH", "Hardness", "Turbidity", "Potability"]

# Processor plugin: Add measurement name dynamically
[[processors.rename]]
  namepass = ["water_quality"]
  [[processors.rename.replace]]
    field = "Potability"
    dest = "water_potability_status"

# Aggregator plugin: Compute hourly averages for Grafana
[[aggregators.basicstats]]
  namepass = ["pH", "Turbidity", "Hardness"]
  period = "1h"
  stats = ["mean", "max", "min"]
  drop_original = false

# Tags for Grafana filtering
[[processors.override]]
  namepass = ["water_quality"]
  tags = { "region" = "South", "system_type" = "Digital Twin" }
